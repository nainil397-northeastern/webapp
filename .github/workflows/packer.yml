---
name: Packer Github Workflow

on:
  push:
    branches: [ main ]


jobs:
  build:
    name: packer-test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'
      
      - name: Cache Maven packages
      #This action allows caching dependencies and build outputs to improve workflow execution time.
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build with Maven
        run: mvn -B package -DskipTests --file pom.xml
        #Build the application using Maven
      
      - name: Upload JAR
        #This uploads artifacts from your workflow allowing you to share data between jobs and store data once a workflow is complete.
        uses: actions/upload-artifact@v3
        with:
        #Set artifact name
          name: artifact
          #From this path
          path: target/webapp-0.0.1-SNAPSHOT.jar

      - name: Download JAR
      #Download the artifact which was uploaded in the build's job
        uses: actions/download-artifact@v3
        with:
          name: artifact

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Packer Init
        run: packer init .

      - name: Packer Build - Branches
        run: export PKR_VAR_access_key=${{ secrets.AWS_ACCESS_KEY_ID }} && export PKR_VAR_secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }} && packer build -var-file=creds.auto.pkrvars.hcl ami-packer.pkr.hcl

      - name: AWS Configure CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID_DEMO}}
          aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY_DEMO}}
          aws-region: us-east-1

      - name: Get new AMI ID and create new launch template
       
        run: |
          AMI_ID=$(jq -r '.builds[-1].artifact_id' manifest.json | cut -d ":" -f2)
          echo $AMI_ID
          aws ec2 describe-launch-templates
          aws ec2 create-launch-template-version \
          --launch-template-name nainil_check \
          --source-version 1 \
          --launch-template-data "ImageId=$AMI_ID"
      - name: Instance Refresh
        run: |
          aws autoscaling start-instance-refresh --auto-scaling-group-name asg_launch_config


      

    
          